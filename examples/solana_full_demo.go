package examples

import (
    "crypto/rand"
    "fmt"
    "log"
    
    "github.com/canopy-network/canopy/lib/frost"
)

func SolanaFullDemo() {
    fmt.Println("üåü FROST Solana Full Integration Demo")
    fmt.Println("====================================")
    
    // Initialize Ed25519 curve for Solana
    curve := frost.NewEd25519Curve()
    fmt.Println("‚úÖ Ed25519 curve initialized")
    
    // === PART 1: BASIC TRANSACTION BUILDING ===
    fmt.Println("\nüì¶ Part 1: Transaction Building")
    fmt.Println("===============================")
    
    // Generate test addresses
    from := createTestAddress()
    to := createTestAddress()
    recentBlockhash := createTestAddress()
    
    fmt.Printf("From: %s\n", from.String())
    fmt.Printf("To: %s\n", to.String())
    
    // Build SOL transfer transaction
    tx, err := frost.BuildTransferTransaction(from, to, frost.SOLToLamports(1.5), recentBlockhash)
    if err != nil {
        log.Fatalf("Failed to build transfer transaction: %v", err)
    }
    
    fmt.Printf("‚úÖ Built SOL transfer transaction (1.5 SOL)\n")
    fmt.Printf("   Instructions: %d\n", len(tx.Message.Instructions))
    fmt.Printf("   Accounts: %d\n", len(tx.Message.AccountKeys))
    fmt.Printf("   Size: %d bytes\n", tx.EstimateSize())
    
    // === PART 2: TOKEN TRANSACTIONS ===
    fmt.Println("\nü™ô Part 2: SPL Token Transactions")
    fmt.Println("=================================")
    
    // Create token accounts
    sourceTokenAccount := createTestAddress()
    destinationTokenAccount := createTestAddress()
    authority := createTestAddress()
    
    // Build token transfer transaction
    tokenTx, err := frost.BuildTokenTransferTransaction(
        sourceTokenAccount,
        destinationTokenAccount,
        authority,
        1000000, // 1 token with 6 decimals
        recentBlockhash,
    )
    if err != nil {
        log.Fatalf("Failed to build token transfer transaction: %v", err)
    }
    
    fmt.Printf("‚úÖ Built SPL token transfer transaction (1.0 tokens)\n")
    fmt.Printf("   Instructions: %d\n", len(tokenTx.Message.Instructions))
    fmt.Printf("   Size: %d bytes\n", tokenTx.EstimateSize())
    
    // === PART 3: CUSTOM PROGRAM INTERACTIONS ===
    fmt.Println("\nüîß Part 3: Custom Program Interactions")
    fmt.Println("======================================")
    
    // Create custom program
    customProgramID := createTestAddress()
    customProgram := frost.NewCustomProgram(customProgramID)
    
    // Create program accounts
    account1 := createTestAddress()
    account2 := createTestAddress()
    
    accounts := []*frost.AccountMeta{
        frost.NewAccountMeta(account1, true, true),   // Signer, writable
        frost.NewAccountMeta(account2, false, false), // Readonly
    }
    
    // Create custom instruction
    customInstruction := customProgram.Call("swap", accounts, []byte{100, 200, 50})
    
    // Build transaction with custom instruction
    builder := frost.NewSolanaTransactionBuilder()
    customTx, err := builder.
        SetFeePayer(account1).
        SetRecentBlockhash(recentBlockhash).
        AddInstruction(customInstruction).
        Build()
    if err != nil {
        log.Fatalf("Failed to build custom transaction: %v", err)
    }
    
    fmt.Printf("‚úÖ Built custom program transaction\n")
    fmt.Printf("   Program ID: %s\n", customProgramID.String())
    fmt.Printf("   Method: swap\n")
    fmt.Printf("   Size: %d bytes\n", customTx.EstimateSize())
    
    // === PART 4: TRANSACTION SIGNING ===
    fmt.Println("\nüîê Part 4: Transaction Signing with FROST")
    fmt.Println("=========================================")
    
    // Generate key pair for signing
    privateKey, publicKey, err := frost.SolanaKeyGeneration()
    if err != nil {
        log.Fatalf("Failed to generate key pair: %v", err)
    }
    defer privateKey.Zeroize()
    
    // Create a transaction to sign (using the public key as the from address)
    signerAddress := addressFromPoint(publicKey)
    signTx, err := frost.BuildTransferTransaction(signerAddress, to, frost.SOLToLamports(0.1), recentBlockhash)
    if err != nil {
        log.Fatalf("Failed to build transaction to sign: %v", err)
    }
    
    // Get message hash
    messageHash, err := signTx.Message.Hash()
    if err != nil {
        log.Fatalf("Failed to compute message hash: %v", err)
    }
    
    // Generate nonce for signing
    nonce, err := curve.ScalarRandom()
    if err != nil {
        log.Fatalf("Failed to generate nonce: %v", err)
    }
    defer nonce.Zeroize()
    
    commitment := curve.BasePoint().Mul(nonce)
    
    // Compute Solana challenge
    challenge, err := frost.SolanaChallenge(commitment, publicKey, messageHash)
    if err != nil {
        log.Fatalf("Failed to compute challenge: %v", err)
    }
    defer challenge.Zeroize()
    
    // Compute signature response
    response, err := frost.SolanaSignResponse(nonce, privateKey, challenge)
    if err != nil {
        log.Fatalf("Failed to compute signature response: %v", err)
    }
    defer response.Zeroize()
    
    // Create signature
    signature := frost.SolanaSignature{
        R: commitment,
        S: response,
    }
    
    // Add signature to transaction
    err = signTx.AddSignature(0, signature)
    if err != nil {
        log.Fatalf("Failed to add signature: %v", err)
    }
    
    fmt.Printf("‚úÖ Transaction signed successfully\n")
    sigBytes, err := signature.Bytes()
    if err != nil {
        log.Fatalf("Failed to get signature bytes: %v", err)
    }
    fmt.Printf("   Signature: %x\n", sigBytes)
    fmt.Printf("   Is signed: %v\n", signTx.IsSigned())
    
    // Verify signature
    err = frost.VerifySolanaSignature(&signature, publicKey, messageHash)
    if err != nil {
        log.Fatalf("Signature verification failed: %v", err)
    }
    fmt.Printf("‚úÖ Signature verification passed\n")
    
    // === PART 5: PROGRAM MANAGER DEMO ===
    fmt.Println("\nüèóÔ∏è Part 5: Program Manager")
    fmt.Println("==========================")
    
    programManager := frost.NewProgramManager()
    
    // System program operations
    systemTransfer := programManager.SystemProgram.Transfer(from, to, frost.SOLToLamports(2.0))
    fmt.Printf("‚úÖ System program transfer instruction created\n")
    
    // Token program operations
    tokenTransfer := programManager.TokenProgram.Transfer(sourceTokenAccount, destinationTokenAccount, authority, 500000)
    fmt.Printf("‚úÖ Token program transfer instruction created\n")
    
    // Associated token program
    associatedTokenAccount, err := programManager.AssociatedTokenProgram.DeriveAssociatedTokenAddress(authority, createTestAddress())
    if err != nil {
        log.Fatalf("Failed to derive associated token account: %v", err)
    }
    fmt.Printf("‚úÖ Associated token account derived: %s\n", associatedTokenAccount.String())
    
    // Create multi-instruction transaction
    multiTx, err := programManager.CreateMultiSigTransaction(
        []*frost.SolanaInstruction{systemTransfer, tokenTransfer},
        from,
        recentBlockhash,
    )
    if err != nil {
        log.Fatalf("Failed to create multi-instruction transaction: %v", err)
    }
    
    fmt.Printf("‚úÖ Multi-instruction transaction created\n")
    fmt.Printf("   Instructions: %d\n", len(multiTx.Message.Instructions))
    fmt.Printf("   Total size: %d bytes\n", multiTx.EstimateSize())
    
    // === PART 6: MESSAGE SIGNING ===
    fmt.Println("\nüìù Part 6: Message Signing")
    fmt.Println("==========================")
    
    // Sign arbitrary message (similar to EIP-191)
    message := []byte("Hello Solana! This is a signed message.")
    
    // Create prefixed message
    prefixedMessage := fmt.Sprintf("Solana Signed Message:\n%d%s", len(message), string(message))
    messageBytes := []byte(prefixedMessage)
    
    // Generate nonce for message signing
    msgNonce, err := curve.ScalarRandom()
    if err != nil {
        log.Fatalf("Failed to generate message nonce: %v", err)
    }
    defer msgNonce.Zeroize()
    
    msgCommitment := curve.BasePoint().Mul(msgNonce)
    
    // Compute challenge for message
    msgChallenge, err := frost.SolanaChallenge(msgCommitment, publicKey, messageBytes)
    if err != nil {
        log.Fatalf("Failed to compute message challenge: %v", err)
    }
    defer msgChallenge.Zeroize()
    
    // Compute message signature response
    msgResponse, err := frost.SolanaSignResponse(msgNonce, privateKey, msgChallenge)
    if err != nil {
        log.Fatalf("Failed to compute message signature response: %v", err)
    }
    defer msgResponse.Zeroize()
    
    // Create message signature
    msgSignature := frost.SolanaSignature{
        R: msgCommitment,
        S: msgResponse,
    }
    
    fmt.Printf("‚úÖ Message signed: %s\n", string(message))
    msgSigBytes, err := msgSignature.Bytes()
    if err != nil {
        log.Fatalf("Failed to get message signature bytes: %v", err)
    }
    fmt.Printf("   Signature: %x\n", msgSigBytes)
    
    // Verify message signature
    err = frost.VerifySolanaSignature(&msgSignature, publicKey, messageBytes)
    if err != nil {
        log.Fatalf("Message signature verification failed: %v", err)
    }
    fmt.Printf("‚úÖ Message signature verification passed\n")
    
    // === SUMMARY ===
    fmt.Println("\nüéâ Demo Complete!")
    fmt.Println("=================")
    fmt.Println("Successfully demonstrated:")
    fmt.Println("  ‚úÖ SOL transfer transactions")
    fmt.Println("  ‚úÖ SPL token transfer transactions")
    fmt.Println("  ‚úÖ Custom program interactions")
    fmt.Println("  ‚úÖ FROST threshold signing")
    fmt.Println("  ‚úÖ Transaction verification")
    fmt.Println("  ‚úÖ Program manager usage")
    fmt.Println("  ‚úÖ Arbitrary message signing")
    fmt.Println("  ‚úÖ Multi-instruction transactions")
    fmt.Println("\nüîó Full Solana wallet and smart contract control achieved!")
    fmt.Println("This implementation provides the same level of control as our Ethereum adapter.")
}

// Helper functions

func createTestAddress() frost.SolanaAddress {
    var addr frost.SolanaAddress
    rand.Read(addr[:])
    return addr
}

func addressFromPoint(point frost.Point) frost.SolanaAddress {
    bytes := point.CompressedBytes()
    var addr frost.SolanaAddress
    copy(addr[:], bytes)
    return addr
}
